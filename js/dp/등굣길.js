/**
 * [문제 설명]
 * 계속되는 폭우로 일부 지역이 물에 잠겼습니다. 물에 잠기지 않은 지역을 통해 학교를 가려고 합니다. 집에서 학교까지 가는 길은 m x n 크기의 격자모양으로 나타낼 수 있습니다.
 * 아래 그림은 m = 4, n = 3 인 경우입니다.
 * 가장 왼쪽 위, 즉 집이 있는 곳의 좌표는 (1, 1)로 나타내고 가장 오른쪽 아래, 즉 학교가 있는 곳의 좌표는 (m, n)으로 나타냅니다.
 * 격자의 크기 m, n과 물이 잠긴 지역의 좌표를 담은 2차원 배열 puddles이 매개변수로 주어집니다.
 * 오른쪽과 아래쪽으로만 움직여 집에서 학교까지 갈 수 있는 최단경로의 개수를 1,000,000,007로 나눈 나머지를 return 하도록 solution 함수를 작성해주세요.
 *
 * [제한사항]
 * 격자의 크기 m, n은 1 이상 100 이하인 자연수입니다.
 * m과 n이 모두 1인 경우는 입력으로 주어지지 않습니다.
 * 물에 잠긴 지역은 0개 이상 10개 이하입니다.
 * 집과 학교가 물에 잠긴 경우는 입력으로 주어지지 않습니다.
 *
 * [입출력 예]
 * m	n	puddles	  return
 * 4	3	[[2, 2]]	4
 */
function solution(m, n, puddles) {
  const MOD = 1000000007;
  const map = Array.from({ length: n }, () => Array(m).fill(0));

  map[0][0] = 1; // 집 위치 표시
  puddles.forEach(([x, y]) => (map[y - 1][x - 1] = -1)); // 물에 잠긴 지역 표시

  for (let y = 0; y < n; y++) {
    for (let x = 0; x < m; x++) {
      // 물에 잠긴 곳은 pass..
      if (map[y][x] === -1) {
        map[y][x] = 0;
        continue;
      }

      // 어디에서 왔는지 역으로 계산하는 방법
      if (x > 0) map[y][x] += map[y][x - 1] % MOD; // 왼쪽에서 오는 수 계산
      if (y > 0) map[y][x] += map[y - 1][x] % MOD; // 아래에서 오는 수 계산
    }
  }
  map[y][x] % MOD; // 최단 경로 개수 나누고 나머지 반환

  return map[n - 1][m - 1];
}
console.log(solution(4, 3, [[2, 2]])); // 4
