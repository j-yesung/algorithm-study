/**
 * [문제 설명]
 * n개의 송전탑이 전선을 통해 하나의 트리 형태로 연결되어 있습니다. 당신은 이 전선들 중 하나를 끊어서 현재의 전력망 네트워크를 2개로 분할하려고 합니다.
 * 이때, 두 전력망이 갖게 되는 송전탑의 개수를 최대한 비슷하게 맞추고자 합니다.
 * 송전탑의 개수 n, 그리고 전선 정보 wires가 매개변수로 주어집니다. 전선들 중 하나를 끊어서 송전탑 개수가 가능한 비슷하도록 두 전력망으로 나누었을 때,
 * 두 전력망이 가지고 있는 송전탑 개수의 차이(절대값)를 return 하도록 solution 함수를 완성해주세요.
 *
 * [제한사항]
 * n은 2 이상 100 이하인 자연수입니다.
 * wires는 길이가 n-1인 정수형 2차원 배열입니다.
 * wires의 각 원소는 [v1, v2] 2개의 자연수로 이루어져 있으며, 이는 전력망의 v1번 송전탑과 v2번 송전탑이 전선으로 연결되어 있다는 것을 의미합니다.
 * 1 ≤ v1 < v2 ≤ n 입니다.
 * 전력망 네트워크가 하나의 트리 형태가 아닌 경우는 입력으로 주어지지 않습니다.
 *
 * [입출력 예]
 * n	wires	                                              result
 * 9	[[1,3],[2,3],[3,4],[4,5],[4,6],[4,7],[7,8],[7,9]]	  3
 * 4	[[1,2],[2,3],[3,4]]	                                0
 * 7	[[1,2],[2,7],[3,7],[3,4],[4,5],[6,7]]	              1
 *
 * [풀이 방식]
 * - DFS
 */
function solution(n, wires) {
  let answer = Infinity; // 최대한 비슷하게 맞추기 위해 최대한 작은 값으로 초기화
  const graph = Array.from({ length: n + 1 }, () => []); // 1번부터 시작하므로 n + 1

  /**
   * ※ 양방향 그래프 생성
   * 각 송전탑(노드)에 연결된 다른 송전탑(노드)들을 저장
   * 각 배열 인덱스 번호가 송전탑 번호를 의미하고, 배열의 값은 연결된 송전탑 번호를 의미
   * 예시: n = 9, wires = [[1, 3], [2, 3], [3, 4], [4, 5], [4, 6], [4, 7], [7, 8], [7, 9]]일 때,
   *      1번   2번  3번         4번            5번  6번   7번        8번   9번
   * [[], [3], [3], [1, 2, 4], [3, 5, 6, 7], [4], [4], [4, 8, 9], [7], [7]];
   */
  wires.forEach(([a, b]) => {
    // 양방향 그래프이므로 a와 b를 연결해줌 (a -> b, b -> a)
    graph[a].push(b);
    graph[b].push(a);
  });

  const dfs = (now, prev) => {
    let cnt = 1; // 현재 노드를 포함하기 위해 1로 초기화

    // 현재 노드와 연결된 다음 노드들에 대해서 이전 노드가 아니면서 방문하지 않은 노드에 대해서만 탐색
    for (const next of graph[now]) {
      if (next === prev) continue; // 이전 노드는 탐색하지 않음
      cnt += dfs(next, now); // 현재 노드와 연결된 다음 노드들에 대해서 재귀적으로 탐색
    }

    // 두 전력망이 가지고 있는 송전탑 개수의 차이(절대값)를 구함
    // n - cnt: 전체 송전탑 개수 - 현재 탐색을 통해 얻은 송전탑 개수
    // cnt: 나머지 전력망 간의 송전탑 개수
    answer = Math.min(answer, Math.abs(n - cnt - cnt)); // 두 전력망이 가지고 있는 송전탑 개수의 차이(절대값)를 구함
    return cnt;
  };

  dfs(1, 0);
  return answer;
}
// console.log(
//   solution(9, [
//     [1, 3],
//     [2, 3],
//     [3, 4],
//     [4, 5],
//     [4, 6],
//     [4, 7],
//     [7, 8],
//     [7, 9],
//   ]),
// ); // 3
// console.log(
//   solution(4, [
//     [1, 2],
//     [2, 3],
//     [3, 4],
//   ]),
// ); // 0
console.log(
  solution(7, [
    [1, 2],
    [2, 7],
    [3, 7],
    [3, 4],
    [4, 5],
    [6, 7],
  ]),
); // 1
